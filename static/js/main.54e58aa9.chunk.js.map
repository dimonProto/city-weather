{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","api/api.js","pages/CitiesList.js","redux/thunk.js","pages/City.js","pages/NotFound.js","redux/reducer.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_CITY","DELETE_CITY","RESTORE_CITIES","ADD_WEATHER","GET_WEATHER_BY_HOUR","restoreCities","payload","type","addWeatherByHour","API_KEY","getWeatherRequest","a","name","country","axios","getHourWeatherRequest","lat","lon","connect","state","cities","dispatch","addCity","city","deleteCity","getWeather","params","weatherData","data","coord","weather","weatherByHours","console","log","props","useState","cityName","setCityName","setCountry","error","setError","useEffect","savedCities","JSON","parse","localStorage","getItem","setItem","stringify","cleanForm","className","length","message","placeholder","value","onChange","e","target","disabled","onClick","find","newCity","map","idx","hoverable","to","id","src","icon","alt","main","temp","temp_min","temp_max","description","danger","handleUpdateWeather","item","currentCity","setCurrentCity","maxTemp","setMaxTemp","useParams","max","hourly","reduce","res","Math","round","style","marginTop","title","bordered","feels_like","humidity","pressure","wind","speed","NotFound","initialState","reducer","action","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54e58aa9.chunk.js","sourcesContent":["export const ADD_CITY = 'ADD_CITY'\r\nexport const DELETE_CITY = 'DELETE_CITY'\r\nexport const RESTORE_CITIES = 'RESTORE_CITIES'\r\nexport const ADD_WEATHER = 'ADD_WEATHER'\r\nexport  const GET_CITY = 'GET_CITY'\r\nexport  const GET_WEATHER_BY_HOUR = 'GET_WEATHER_BY_HOUR'","import {\r\n    ADD_CITY,\r\n    ADD_WEATHER,\r\n    DELETE_CITY,\r\n    GET_WEATHER_BY_HOUR,\r\n    RESTORE_CITIES\r\n} from \"./actionTypes\";\r\n\r\nexport const addCity = (payload) => ({ type:ADD_CITY, payload })\r\nexport const deleteCity = (payload) => ({ type:DELETE_CITY, payload })\r\nexport const restoreCities = (payload) => ({ type:RESTORE_CITIES, payload })\r\nexport const addWeather = (payload) => ({ type:ADD_WEATHER, payload })\r\nexport const addWeatherByHour = (payload) => ({ type:GET_WEATHER_BY_HOUR, payload })","import * as axios from 'axios'\r\nconst API_KEY = 'b9898eab2d007d76ad60232f74562835'\r\n\r\n\r\nexport const getWeatherRequest = async ({name,country}) => {\r\n    return  axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${name},${country}&appid=${API_KEY}&units=metric`)\r\n}\r\n\r\nexport const getHourWeatherRequest = async ({lat, lon}) => {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=daily&appid=${API_KEY}&units=metric`)\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Alert, Button, Card, Input} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {addCity, deleteCity, restoreCities} from \"../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport { getWeather} from \"../redux/thunk\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CitiesList = (props) => {\r\n    const {cities,restoreCities,addCity,getWeather,deleteCity} = props\r\n    const [cityName, setCityName] = useState('')\r\n    const [country, setCountry] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        const savedCities =  JSON.parse(localStorage.getItem('cities'))\r\n        restoreCities(savedCities)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cities', JSON.stringify(cities));\r\n    },[cities])\r\n\r\n    const handleAddCity = () => {\r\n        const isExist = cities.find(city => city.name === cityName && city.country === country)\r\n        if(isExist) {\r\n            setError('Duplicated city')\r\n            return\r\n        } else {\r\n            setError('')\r\n        }\r\n        const newCity = {name:cityName, country}\r\n        addCity(newCity)\r\n        getWeather(newCity)\r\n        cleanForm()\r\n    }\r\n\r\n    const handleDeleteCity = (currentCity) => {\r\n        deleteCity(currentCity)\r\n    }\r\n\r\n    const handleUpdateWeather = ({name,country}) => {\r\n        getWeather({\r\n            name,country\r\n        })\r\n    }\r\n\r\n    const cleanForm = () => {\r\n        setCityName('')\r\n        setCountry('')\r\n    }\r\n\r\n    return(\r\n        <div className={'container'}>\r\n            {error.length > 0 && <Alert message={error} type=\"error\" />}\r\n            <h1 className={'h1'}>City Weather</h1>\r\n           <div className={'addBlock'}>\r\n               <Input\r\n                   type=\"text\"\r\n                   placeholder='City Name'\r\n                   value={cityName}\r\n                   onChange={(e) => setCityName(e.target.value)}\r\n               />\r\n               <Input\r\n                   type=\"text\"\r\n                   placeholder='Country'\r\n                   value={country}\r\n                   onChange={(e) => setCountry(e.target.value)}\r\n               />\r\n               <Button disabled={!cityName} type=\"primary\" onClick={handleAddCity} >Add city</Button>\r\n           </div>\r\n            <div className={'cardList'}>\r\n                {cities.map((city, idx )=> {\r\n                    return(\r\n\r\n                        <Card hoverable className={'cardBlock'} key={idx}>\r\n                            <Link to={`/city/${city.weather?.id}`} className={'cardLink'}>\r\n                                <p className={'cityName'}>\r\n                                    {city.name}\r\n                                    {city.country && `, ${city.country}`}\r\n                                </p>\r\n                                {\r\n                                    city.weather && (\r\n                                        <>\r\n                                            <img src={`https://openweathermap.org/img/wn/${city.weather.weather[0].icon}@2x.png`} alt={city.weather.weather[0].id} />\r\n                                            <p>{city.weather.main.temp} °</p>\r\n                                            <div className={'tempBlock'}>\r\n                                                <span>min: {city.weather.main.temp_min}</span>\r\n                                                <span>max: {city.weather.main.temp_max}</span>\r\n                                            </div>\r\n                                            <p>{city.weather.weather[0].description}</p>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </Link>\r\n                            <div className={'btnGroup'}>\r\n                                <Button type=\"primary\" danger onClick={() => handleDeleteCity(city)}>Delete</Button>\r\n                                <Button type=\"primary\"  onClick={() => handleUpdateWeather(city)}>Update</Button>\r\n                            </div>\r\n                        </Card>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state.cities\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCity: (city) => {\r\n            dispatch(addCity(city))\r\n        },\r\n        deleteCity: (city) => {\r\n            dispatch(deleteCity(city))\r\n        },\r\n        restoreCities: (cities) => {\r\n            dispatch(restoreCities(cities))\r\n        },\r\n        getWeather:(params) => {\r\n            dispatch(getWeather(params))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CitiesList)","import {getHourWeatherRequest, getWeatherRequest} from \"../api/api\";\r\nimport {addWeather, addWeatherByHour} from \"./actions\";\r\n\r\nexport const getWeather = (params) => async (dispatch) => {\r\n    try{\r\n        const {data: weatherData} = await getWeatherRequest(params)\r\n        const {data} = await getHourWeatherRequest({\r\n            lat: weatherData.coord.lat,\r\n            lon: weatherData.coord.lon,\r\n        })\r\n\r\n        dispatch(addWeather({\r\n            ...params,\r\n            weather: weatherData\r\n        }))\r\n\r\n        dispatch(addWeatherByHour({\r\n            ...params,\r\n            weatherByHours: data\r\n        }))\r\n    } catch (e){\r\n        console.log(e)\r\n    }\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { Card, Spin} from \"antd\";\r\nimport {connect} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {restoreCities} from \"../redux/actions\";\r\n\r\nconst City = (props) => {\r\n    const {cities,restoreCities,city} = props\r\n    const [currentCity,setCurrentCity] = useState()\r\n    const [maxTemp,setMaxTemp] = useState()\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        const savedCities =  JSON.parse(localStorage.getItem('cities'))\r\n       restoreCities(savedCities)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(!currentCity){\r\n            if(!city(+id)) return\r\n            setCurrentCity(city(+id))\r\n            const max = city(+id).weatherByHours.hourly.reduce((res,item) => {\r\n                if(Math.round(item.temp) > res) {\r\n                    res = Math.round(item.temp)\r\n                }\r\n                return res\r\n            }, -99)\r\n            setMaxTemp(max)\r\n        }\r\n    },[cities])\r\n\r\n    if (!currentCity || !currentCity.weather){\r\n        return <div className={'spinBlock'}><Spin /></div>\r\n    }\r\n\r\n    const calculateMargin = (temp) => {\r\n        return (maxTemp - temp) * 5\r\n    }\r\n\r\n    return(\r\n        <div className={'detailBlock'}>\r\n            <h1 className={'h1'}>Hour Weather</h1>\r\n            <div className={'hourBlock'}>\r\n                {currentCity.weatherByHours.hourly.map(item => {\r\n                    return (\r\n                        <div className={'cardHour'} style={{marginTop: calculateMargin(Math.round(item.temp))}}>\r\n                            {Math.round(item.temp) > 0 ? `+${Math.round(item.temp)}` : Math.round(item.temp)} °\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={'container'}>\r\n                <div className={'cardDetail'}>\r\n                    <div className=\"site-card-border-less-wrapper\">\r\n                        <Card className={'cityDetail'} title={currentCity.weather.name} bordered={false}>\r\n                           <img src={`https://openweathermap.org/img/wn/${currentCity.weather.weather[0].icon}@2x.png`} alt={currentCity.weather.weather[0].id} />\r\n                            <p>{currentCity.weather.weather[0].main}</p>\r\n                            <p>Temperature: {currentCity.weather.main.temp} °</p>\r\n                            <div className={'cityGroup'}>\r\n                                <p>Temp min: {currentCity.weather.main.temp_min} °</p>\r\n                                <p>Feels like: {currentCity.weather.main.feels_like} °</p>\r\n                                <p>Humidity: {currentCity.weather.main.humidity} %</p>\r\n                                <p>Temp max: {currentCity.weather.main.temp_max} °</p>\r\n                                <p>Atmospheric pressure: {currentCity.weather.main.pressure } hPa</p>\r\n                                <p>Wind speed: {currentCity.weather.wind.speed} meter/sec</p>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        city: (id) => {\r\n            return state.cities.find(item => item.weather.id === id)\r\n        },\r\n        cities: state.cities\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        restoreCities: (cities) => {\r\n            dispatch(restoreCities(cities))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(City)","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <div>NotFound</div>\r\n    )\r\n}\r\nexport default NotFound","import {ADD_CITY, ADD_WEATHER, DELETE_CITY, GET_HOUR_WEATHER, GET_WEATHER_BY_HOUR, RESTORE_CITIES} from \"./actionTypes\";\r\n\r\nlet initialState = {\r\n    cities: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CITY:\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities, action.payload]\r\n            }\r\n        case DELETE_CITY:\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter((city) => city.name !== action.payload.name || city.country !== action.payload.country)\r\n            }\r\n        case RESTORE_CITIES:{\r\n            return {\r\n                ...state,\r\n                cities:[...action.payload]\r\n            }\r\n        }\r\n        case ADD_WEATHER:{\r\n            return {\r\n                ...state,\r\n                cities: state.cities.map(city => {\r\n                    if(city.name === action.payload.name && city.country === action.payload.country){\r\n                        city.weather = action.payload.weather\r\n                    }\r\n                    return city\r\n                })\r\n            }\r\n        }\r\n        case GET_WEATHER_BY_HOUR:\r\n            return {\r\n                ...state,\r\n                cities:state.cities.map(city => {\r\n                    if(city.name === action.payload.name && city.country === action.payload.country){\r\n                        city.weatherByHours = action.payload.weatherByHours\r\n                    }\r\n                    return city\r\n                })\r\n            }\r\n        default:\r\n           return state\r\n    }\r\n}\r\n\r\n\r\nexport default reducer","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nlet store = createStore(reducer,composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","import './App.css';\nimport {BrowserRouter,Routes,Route} from \"react-router-dom\";\nimport CitiesList from \"./pages/CitiesList\";\nimport City from \"./pages/City\";\nimport NotFound from \"./pages/NotFound\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nfunction App() {\n  return (\n      <Provider store={store}>\n          <BrowserRouter>\n              <Routes>\n                  <Route path=\"/city-weather\" element={<CitiesList />}/>\n                  <Route path=\"/city/:id\" element={<City />}/>\n                  <Route path=\"*\" element={<NotFound />} />\n              </Routes>\n          </BrowserRouter>\n      </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}